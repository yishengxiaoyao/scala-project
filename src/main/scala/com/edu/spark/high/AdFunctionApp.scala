package com.edu.spark.high

object AdFunctionApp {

  def main(args: Array[String]): Unit = {
    /*var l=List(1,2,3,4,5,6,7,8)
    for(element<-l){
      println(element)
    }
    //对集合中的每一个元素都执行相同的操作
    println(l.map((x:Int)=>x*2))
    println(l.map((x)=>x*2))
    println(l.map(x=>x*2))
    println(l.map(_ * 2))
    //对每一个元素进行遍历
    l.map(_*2).foreach(x=>println(x))
    l.foreach(x=>println(x))
    //对元素进行过滤
    println(l.map(_*2).filter(_>8))
    //获取多少个元素，必须要指定获取前n个元素
    println(l.take(3))
    println(l.sum)
    //求和  //相邻两个数据进行相加或者相见 左边+后边 或者左边-右边
    println(l.reduce(_+_))
    //(1,2,3,4,5,6,7,8)=>(3,3,4,5,6,7,8)=>(6,4,5,6,7,8)=>(10,5,6,7,8)=>(15,6,7,8)=>(21,7,8)=>(28,8)=>(36)
    l.reduce((x,y)=>{
      println(x,y)
      x+y
    })
    println(l.reduceLeft(_+_))
    //(1,2,3,4,5,6,7,8)=>(3,3,4,5,6,7,8)=>(6,4,5,6,7,8)=>(10,5,6,7,8)=>(15,6,7,8)=>(21,7,8)=>(28,8)=>(36)
    l.reduceLeft((x,y)=>{
      println(x,y)
      x+y
    })
    println(l.reduceRight(_+_))
    //(1,2,3,4,5,6,7,8)=>(1,2,3,4,5,6,15)=>(1,2,3,4,5,21)=>(1,2,3,4,26)=>(1,2,3,30)=>(1,2,33)=>(1,35)=>(36)
    l.reduceRight((x,y)=>{
      println(x,y)
      x+y
    })

    println(l.reduce(_-_))
    //(1,2,3,4,5,6,7,8)=>(-1,3,4,5,6,7,8)=>(-4,4,5,6,7,8)=>(-8,5,6,7,8)=>(-13,6,7,8)=>(-19,7,8)=>(-26,8)=>(-34)
    l.reduce((x,y)=>{
      println(x,y)
      x-y
    })
    println(l.reduceLeft(_-_)) //(1,2,3,4,5,6,7,8)=>(-1,3,4,5,6,7,8)=>(-4,4,5,6,7,8)=>(-8,5,6,7,8)=>(-13,6,7,8)=>(-19,7,8)=>(-26,8)=>(-34)
    //详细步骤
    l.reduceLeft((x,y)=>{
      x-y
    })
    println(l.reduceRight(_-_)) //(1,2,3,4,5,6,7,8)=>(1,2,3,4,5,6,-1)=>(1,2,3,4,5,7)=>(1,2,3,4,-2)=>(1,2,3,6)=>(1,2,-3)=>(1,5)=>(-4)
    //详细步骤
    l.reduceRight((x,y)=>{
      println(x+":"+y)
      x-y
    })
    println("---fold---")
    println(l.fold(1)(_+_))   //两个括号连着，就是表示两个参数求和，第一个括号的值可以理解为初始值，加上后面的参数，如果是foldleft，是将这个数放到最左边，如果是foldright，将这个数据放到最右边
    //运算规则(1,1,2,3,4,5,6,7,8)=>(2,2,3,4,5,6,7,8)=>(4,3,4,5,6,7,8)=>(7,4,5,6,7,8)=>(11,5,6,7,8)=>(16,6,7,8)=>(22,7,8)=>(29,8)=>(37)
    println("---foldleft+---")
    l.foldLeft(1)((x,y)=>{
      println(x,y)
      x+y
    })
    println("---foldRight+---")
    //运算规则(1,2,3,4,5,6,7,8,1)=>(1,2,3,4,5,6,7,9)=>(1,2,3,4,5,6,16)=>(1,2,3,4,5,22)=>(1,2,3,4,27)=>(1,2,3,31)=>(1,2,34)=>(1,36)=>(37)
    l.foldRight(1)((x,y)=>{
      println(x,y)
      x+y
    })
    println("---foldminus---")
    println(l.fold(1)(_-_))   //(1,1,2,3,4,5,6,7,8)=>(0,2,3,4,5,6,7,8)=>(-2,3,4,5,6,7,8)=>(-5,4,5,6,7,8)=>(-9,5,6,7,8)=>(-14,6,7,8)=>(-20,7,8)=>(-27,8)=>(-35)
    l.fold(1)((x,y)=>{
      println(x,y)
      x-y
    })
    println("---foldrightminus---")
    //(1,2,3,4,5,6,7,8,1)=>(1,2,3,4,5,6,7,7)=>(1,2,3,4,5,6,0)=>(1,2,3,4,5,6)=>(1,2,3,4,-1)=>(1,2,3,5)=>(1,2,-2)=>(1,4)=>(-3)
    println(l.foldRight(1)(_-_))
    l.foldRight(1)((x,y)=>{
      println(x,y)
      x-y
    })
    println("---foldleftminus---")
    println(l.foldLeft(1)(_-_))
    //(1,1,2,3,4,5,6,7,8)=>(0,2,3,4,5,6,7,8)=>(-2,3,4,5,6,7,8)=>(-5,4,5,6,7,8)=>(-9,5,6,7,8)=>(-14,6,7,8)=>(-20,7,8)=>(-27,8)=>(-35)
    l.foldLeft(1)((x,y)=>{
      println(x,y)
      x-y
    })
    //reduce操作，默认从左边开始进行加或者减，即前两个数进行相加或者相减，依次往后推进，直到只有一个数据。
    //reduceLeft 与reduce操作一致，不再赘述。
    //reduceRight 从右边开始往左方向走，先取追右边的两个数，进行相加或者相减，依次往左执行，直到只有一个数据
    //fold()()是一个颗粒化操作，相当于将两个参数进行相加(减)；加(减)操作是把第一个参数放在最前面，从左往后加(减)，依次进行相加(减)，直到只有一个数；
    //foldleft()()与fold操作一致
    //foldright()()是要将第一个参数放到后面;从右往左进行操作，直到只有一个数。

    println(l.min+":"+l.max+":"+l.sum)
    println(l.count(_>5))*/

    //flatmap

    var f = List(List(1, 2), List(3, 4), List(5, 6))
    //将多个集合中的元素放入到一个集合中
    println(f.flatten)
    //flatmap=map+flatten
    //flatmap是元素放到一个集合中，然后在进行操作
    println(f.flatMap(_.map(_ * 2)))

    //map是针对元素的操作
    println(f.map(_.map(_ * 2)))

  }

  def sum(a: Int, b: Int) = a + b

  //颗粒化
  def add(a: Int)(b: Int) = a + b

}
